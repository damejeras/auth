// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/damejeras/auth/internal/admin"
	"github.com/damejeras/auth/internal/app"
	"github.com/damejeras/auth/internal/client"
	"github.com/damejeras/auth/internal/consent"
	"github.com/damejeras/auth/internal/identity"
	"github.com/damejeras/auth/internal/oauth2"
	"github.com/damejeras/auth/internal/persistence"
	"github.com/kkyr/fig"
	"net/http"
)

// Injectors from wire.go:

func initOauth2HTTP(cfg *app.Config) (*http.Server, error) {
	dynamoDB := persistence.NewDynamoDBClient(cfg)
	clientStore := client.NewClientStorage()
	manager := oauth2.NewManager(dynamoDB, clientStore)
	challengeRepository, err := persistence.NewIdentityChallengeRepository(dynamoDB)
	if err != nil {
		return nil, err
	}
	consentChallengeRepository, err := persistence.NewConsentChallengeRepository(dynamoDB)
	if err != nil {
		return nil, err
	}
	repository, err := persistence.NewConsentRepository(dynamoDB)
	if err != nil {
		return nil, err
	}
	identityManager := identity.NewManager(challengeRepository, consentChallengeRepository, repository, cfg)
	server := oauth2.NewServer(manager, identityManager)
	httpServer := oauth2.NewHTTPServer(server)
	return httpServer, nil
}

func initAdminHTTP(cfg *app.Config) (*http.Server, error) {
	dynamoDB := persistence.NewDynamoDBClient(cfg)
	challengeRepository, err := persistence.NewIdentityChallengeRepository(dynamoDB)
	if err != nil {
		return nil, err
	}
	identityService := identity.NewService(challengeRepository)
	repository, err := persistence.NewConsentRepository(dynamoDB)
	if err != nil {
		return nil, err
	}
	consentChallengeRepository, err := persistence.NewConsentChallengeRepository(dynamoDB)
	if err != nil {
		return nil, err
	}
	consentService := consent.NewService(repository, consentChallengeRepository)
	server := admin.NewHTTPServer(identityService, consentService)
	return server, nil
}

// wire.go:

func initConfig() (*app.Config, error) {
	var config app.Config
	if err := fig.Load(&config); err != nil {
		return nil, err
	}

	return &config, nil
}
